
var filterBench{{.DataTypeCap}}Tests = []struct {
	name     string
	input    []{{.DataType}}
	equalTo  {{.DataType}}
	expected []{{.DataType}}
}{

	{
		name: "basic example",
		input: []{{.DataType}}{
			{{dataTypeGenerator  .DataType 1}},
			{{dataTypeGenerator  .DataType 2}},
			{{dataTypeGenerator  .DataType 3}},
		},
        equalTo: {{dataTypeGenerator  .DataType 2}},
		expected: []{{.DataType}}{
            {{dataTypeGenerator  .DataType 2}},
        },
	},
	{
		name: "more than one element",
		input: []{{.DataType}}{
			{{dataTypeGenerator  .DataType 1}},
			{{dataTypeGenerator  .DataType 2}},
			{{dataTypeGenerator  .DataType 3}},
			{{dataTypeGenerator  .DataType 2}},
		},
        equalTo: {{dataTypeGenerator  .DataType 2}},
		expected: []{{.DataType}}{
            {{dataTypeGenerator  .DataType 2}},
            {{dataTypeGenerator  .DataType 2}},
        },
	},
}

func BenchmarkTestFilter{{.DataTypeCap}}(b *testing.B) {
	for _, tt := range filterBench{{.DataTypeCap}}Tests {
		Filter{{.DataTypeCap}}(tt.input, func(in {{.DataType}}) bool {
			return in == tt.equalTo
		})
	}

}
