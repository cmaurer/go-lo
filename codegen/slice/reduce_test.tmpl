
var reduce{{.DataTypeCap}}Tests = []struct {
	name     string
	input    []{{.DataType}}
	expected func() {{.DataType}}
}{

	{
		name: "basic example",
		input: []{{.DataType}}{
			{{dataTypeGenerator  .DataType 1}},
			{{dataTypeGenerator  .DataType 2}},
			{{dataTypeGenerator  .DataType 3}},
		},
		expected: func() {{.DataType}} {
			input := []{{.DataType}}{
				{{dataTypeGenerator  .DataType 0}},
				{{dataTypeGenerator  .DataType 1}},
				{{dataTypeGenerator  .DataType 2}},
				{{dataTypeGenerator  .DataType 3}},
			}
			var accumulator {{.DataType}}
			for _, in := range input {
			  accumulator = {{.DataType}}(accumulator) + {{.DataType}}(in)
			}
			return accumulator
		},
	},
}

func TestReduce{{.DataTypeCap}}(t *testing.T) {
	for _, tt := range reduce{{.DataTypeCap}}Tests {
		t.Run(tt.name, func(t *testing.T) {
            output := Reduce{{.DataTypeCap}}(tt.input, func(acc {{.DataType}}, elem {{.DataType}}) {{.DataType}} {
                return acc + elem
            }, {{dataTypeGenerator  .DataType 0}})
			expectedValue := tt.expected()
			assert.Equal(t, output, expectedValue)
		})
	}

}
